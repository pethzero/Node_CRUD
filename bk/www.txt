const express = require('express');
const Sequelize = require('sequelize');

// เชื่อมต่อกับฐานข้อมูล MySQL
const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql',
  pool: {
    max: 10,
    min: 0,
    acquire: 30000,
    idle: 10000
  }
});

// กำหนดโครงสร้างของตาราง
const Todo = sequelize.define('todo', {
  title: Sequelize.STRING,
  description: Sequelize.STRING
});

const app = express();
app.use(express.json());

// เพิ่ม Todo
app.post('/api/todos', async (req, res) => {
  const { title, description } = req.body;
  const todo = await Todo.create({ title, description });
  res.json(todo);
});

// ดึงข้อมูล Todo ทั้งหมด
app.get('/api/todos', async (req, res) => {
  const todos = await Todo.findAll();
  res.json(todos);
});

// ดึงข้อมูล Todo ตาม ID
app.get('/api/todos/:id', async (req, res) => {
  const todo = await Todo.findByPk(req.params.id);
  if (!todo) return res.status(404).json({ message: 'Todo not found' });
  res.json(todo);
});

// แก้ไขข้อมูล Todo
app.put('/api/todos/:id', async (req, res) => {
  const { title, description } = req.body;
  const todo = await Todo.findByPk(req.params.id);
  if (!todo) return res.status(404).json({ message: 'Todo not found' });
  todo.title = title;
  todo.description = description;
  await todo.save();
  res.json(todo);
});

// ลบ Todo
app.delete('/api/todos/:id', async (req, res) => {
  const todo = await Todo.findByPk(req.params.id);
  if (!todo) return res.status(404).json({ message: 'Todo not found' });
  await todo.destroy();
  res.json({ message: 'Todo deleted successfully' });
});

// สร้างตารางในฐานข้อมูล (หากยังไม่มี)
sequelize.sync()
  .then(() => console.log('Database synced'))
  .catch(err => console.error('Error syncing database:', err));

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));
